# ‚òùÔ∏è First, a name for our Action. This will be displayed in the GitHub Actions tab.
name: 1. Hello, world!

# ‚öôÔ∏è Next, give it a trigger -- when do you want the action to run? On a push, pull, schedule?
on:
  #  ‚åõÔ∏è We want to schedule it
  schedule:
    # "cron" is your Unix-like operating systems' way of interpreting time. It's an expression made of five fields which represent the time to execute a command.
    #  More information here: https://crontab.guru/#*_*_*_*.
    - cron: "*/10 * * * *"
    # The keyword `workflow_dispatch` will let us manually run the Action on GitHub.
    # Without this keyword, we would have to wait for 10 minutes every time
    # to test and see how the action turned out.
  workflow_dispatch:

# üíº Finally, let's tell our file what command to execute. A GitHub Action can be made up of several such jobs.

jobs:
  # Give this particular job a name, `hello_world`.
  hello_world:
    # Tell the GitHub Action what kind of virtual machine to run on. In our case, we'll be using the latest version of Ubuntu.
    runs-on: ubuntu-latest
    # Within this job, let's define our commands in steps
    steps:
      # First, we need to clone the repo on the Ubuntu virtual runner.
      # This is just like you would clone a repo on your computer before exploring the code within it.
      - name: check out the repo
        uses: actions/checkout@v3
      # Next, we will execute a simple command, that prints a two-word string, "hello, world!"
      - name: print, "hello, world!"
        run: echo hello, world!
